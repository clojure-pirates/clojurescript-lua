{"name":"Clojurescript-lua","tagline":"Clojurescript running on lua ! In construction","body":"Clojurescript-Lua\r\n-----------------\r\n\r\nWelcome, ClojureScript/Lua is a lisp language targeting Lua. It is using the ClojureScript compiler, and provides a different backend and ecosystem for the ClojureScript language.\r\n\r\nThe current version of ClojureScript/Lua is 0.1.0-ALPHA. It is in alpha stage, hence the name, and you should expect that a lot of things are not working yet !\r\n\r\nClojureScript/Lua should run on any posix system that has bash, lua and java installed.\r\n\r\nIf you find any bug, don't hesitate to submit issues on github, especially if Cljs/Lua doesn't work at all on your computer, and you find a fix :)\r\n\r\nHere is hello world in Cljs/Lua :\r\n\r\n~~~clojure\r\n(println \"Hello, world !\")\r\n~~~\r\n\r\nDistinctive traits of ClojureScript are :\r\n\r\n- Lisp language (s-expression syntax, code is data, etc)\r\n- Functional (mostly)\r\n- Functional data structures with literal syntax \r\n\r\n~~~clojure\r\n(def my-map {:john \"doe\" :jack \"daniels\"})\r\n(println (my-map :john)) ;; prints \"doe\"\r\n~~~\r\n\r\n### Getting started\r\n\r\nYou need to have leiningen installed. This is the only prerequisite (with of course java & all). After that, you just need to grab yourself a copy of the repo, either via cloning it or downloading an archive.\r\n\r\n### Running the Cljs/Lua repl\r\n\r\nTo run the repl, you need to have Lua 5.1 installed, as well as a few dependencies:\r\n\r\n- lua json library\r\n- lua bit ops library\r\n\r\nThe two are quite standard lua libs that should be available in your distribution's repositories.\r\n\r\nTo run the REPL, issue the following command\r\n\r\n~~~sh\r\n./cljslua repl\r\n~~~\r\n\r\nOn the first run, Cljs/Lua will install some components that it needs.\r\n\r\n#### REPL options\r\n\r\nBy default, the repl shows the output of compiled Cljs commands. You can switch that off by calling the function\r\n\r\n~~~clojure\r\n(switch-verbose)\r\n~~~\r\n\r\nYou can also switch off execution by calling\r\n\r\n~~~clojure\r\n(switch-exec)\r\n~~~\r\n\r\n### Cljs/Lua compiler\r\n\r\nCljs/Lua has a **very** basic compiler that works the following way\r\n\r\n~~~sh\r\n./cljslua compile <in-file> <out-file>\r\n~~~\r\n\r\n1. You give it a in-file and an out-file.\r\n2. It will compile *everything* to the out-file. That means, the content of the core library, of the compiled file, and of any dependencies.\r\n3. It will search for required namespaces in subdirectories of the directory containing the in-file. File layout doesn't matter for the moment.\r\n\r\nThis is very basic, but yet functionnal. The compiler will be redesigned soon, but some thoughts need to be given to the general design of it first.\r\n\r\n### Running the lein repl\r\n\r\nIf you want to see how the compiler compiles out snippets of clojurescript :\r\n\r\n~~~sh\r\n$ lein repl\r\n~~~\r\n\r\n~~~clojure\r\nREPL started; server listening on localhost port 31236\r\ncljs.lua.compiler=> (lua (defn add [a b] (+ a b)))\r\n\"cljs.user.add = (function (a,b)\r\nreturn (a + b)\r\nend)\"\r\nnil\r\n~~~\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}